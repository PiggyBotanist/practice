Question:
Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"
 
Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.

*************************************************************************************************************************
Attempt #1 (2023-09-07)- Python3
(Runtime: 5189ms, beats 14.70% users. Memory: 16.39Mb, beats 71.50% users)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        longestPalindrome = ""

        # Loop through the entire string
        for i in range(len(s)):
            # Find out all position with the character at where we are
            # Problem! (example badada --> b will be looped 1 time, a will be looped 3 times!)
            # This will cripple the performance!
            positions = [index for index, char in enumerate(s) if char == s[i]]
            #print(f"letter: {s[i]}, at position: {positions}")

            # Loop through all the positions 
            for j in range(s.count(s[i])):
                # Keep which position we are evaluating from the array
                current_position = positions[len(positions) - j - 1]
                # Store the substring
                substring = s[i:current_position+1]
                #print(f"current substring: {substring}")

                # If the reverse substring is equal to substring and it is longer than what we have, keep it.
                if substring[::-1] == substring and len(longestPalindrome) < len(substring):
                    longestPalindrome = substring
        return longestPalindrome
                            

