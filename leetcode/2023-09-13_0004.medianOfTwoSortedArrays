Question:
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Constraints:
    nums1.length == m
    nums2.length == n
    0 <= m <= 1000
    0 <= n <= 1000
    1 <= m + n <= 2000
    -106 <= nums1[i], nums2[i] <= 106

*************************************************************************************************************************
Attempt #1 (2023-09-13)- Java
(Runtime: 2ms, beats 75.99% users. Memory: 44.84Mb, beats 25.09% users)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Define dummy variables
        int[] nums = new int[nums1.length + nums2.length];
        int i = 0;  // Keeping track for nums1
        int j = 0;  // Keeping track for nums2
        int k = 0;  // Keeping track for the sum array

        // 3 cases:
        // - length of two arrays are equal
        // - length of array 1 greater than 2
        // - length of array 2 greater than 1

        // Loop for case 1:
        while(i < nums1.length && j < nums2.length){
            // Append the larger number to the array
            if(nums1[i] < nums2[j]){
                nums[k] = nums1[i];
                i++;
            }else{
                nums[k] = nums2[j];
                j++;
            }
            k++;
        }
        // Loop for case 2:
        while(i < nums1.length){
            nums[k] = nums1[i];
            i++;
            k++;
        }
        // Loop for case 3:
        while(j < nums2.length){
            nums[k] = nums2[j];
            j++;
            k++;
        }

        // Return the middle value
        if(nums.length % 2 == 0){
            return (double)(nums[nums.length / 2] + nums[nums.length/2 - 1])/2;
        }
        return nums[nums.length / 2];
    }
}

